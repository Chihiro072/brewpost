using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using BrewPost.Core.Interfaces;
using BrewPost.API.DTOs;
using System.Text.Json;
using CoreGeneratedComponentDto = BrewPost.Core.DTOs.GeneratedComponentDto;

namespace BrewPost.API.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AIController : ControllerBase
{
    private readonly IBedrockService _bedrockService;
    private readonly ITrendingService _trendingService;
    private readonly ILogger<AIController> _logger;

    public AIController(IBedrockService bedrockService, ITrendingService trendingService, ILogger<AIController> logger)
    {
        _bedrockService = bedrockService;
        _trendingService = trendingService;
        _logger = logger;
    }

    [HttpPost("generate-components")]
    [AllowAnonymous]
    public async Task<IActionResult> GenerateComponents([FromBody] GenerateComponentsRequest request)
    {
        try
        {
            if (request?.Node == null)
            {
                return BadRequest(new { ok = false, message = "Node is required" });
            }

            _logger.LogInformation("Generating components for node: {NodeId}", request.Node.Id);

            // Use Bedrock AI to generate relevant components
            var components = await GenerateAIComponents(request.Node);

            return Ok(new { ok = true, components });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating components");
            
            // Fallback to mock components if AI fails
            _logger.LogWarning("Falling back to mock components due to AI error");
            var fallbackComponents = request.Node != null ? GenerateMockComponents(request.Node) : new List<GeneratedComponentDto>();
            return Ok(new { ok = true, components = fallbackComponents });
        }
    }

    private async Task<List<GeneratedComponentDto>> GenerateAIComponents(ContentNodeDto node)
    {
        try
        {
            var prompt = CreateComponentGenerationPrompt(node);
            var aiResponse = await _bedrockService.GenerateContentAsync(prompt);
            
            _logger.LogInformation("AI Response for components: {Response}", aiResponse);
            
            // Parse the AI response and convert to components
            var components = ParseAIResponseToComponents(aiResponse, node);
            
            // Ensure minimum relevance score of 50% (more lenient)
            components = components.Where(c => c.RelevanceScore >= 0.50).ToList();
            
            // Ensure we have components for all 3 categories
            var onlineTrendCount = components.Count(c => c.Type == "online_trend");
            var campaignTypeCount = components.Count(c => c.Type == "campaign_type");
            var promotionTypeCount = components.Count(c => c.Type == "promotion_type");
            
            _logger.LogInformation("AI generated components by type: online_trend={OnlineTrend}, campaign_type={CampaignType}, promotion_type={PromotionType}", 
                onlineTrendCount, campaignTypeCount, promotionTypeCount);
            
            // STRICT PROMOTION TYPE FALLBACK - Always ensure promotion components exist
            if (promotionTypeCount == 0)
            {
                _logger.LogWarning("No promotion type components generated by AI, applying strict fallback");
                var promotionFallbacks = GenerateContextualPromotionFallbacks(node);
                components.AddRange(promotionFallbacks);
                promotionTypeCount = promotionFallbacks.Count;
                _logger.LogInformation("Added {Count} promotion fallback components", promotionFallbacks.Count);
            }
            
            // Get real trending data from TrendingService
            var trendingComponents = await _trendingService.GetTrendingComponentsAsync();
            _logger.LogInformation("Retrieved {Count} trending components from TrendingService", trendingComponents.Count);
            
            // Generate contextual mock components once for efficiency (excluding online trends)
            var mockComponents = GenerateContextualMockComponents(node);
            var mockCampaignType = mockComponents.Where(c => c.Type == "campaign_type").ToList();
            var mockPromotionType = mockComponents.Where(c => c.Type == "promotion_type").ToList();
            
            _logger.LogInformation("Mock components breakdown - Campaign Type: {CampaignType}, Promotion Type: {PromotionType}", 
                mockCampaignType.Count, mockPromotionType.Count);
            
            // ENSURE MINIMUM 2 COMPONENTS PER CATEGORY - Add missing components
            var componentsAdded = 0;
            
            // For online trends, use real trending data first, then fallback to mock if needed
            if (onlineTrendCount < 2)
            {
                var needed = 2 - onlineTrendCount;
                var realTrendsToAdd = trendingComponents.Take(needed).Select(t => new BrewPost.API.DTOs.GeneratedComponentDto
                {
                    Id = t.Id,
                    Type = t.Type,
                    Title = t.Title,
                    Name = t.Name,
                    Description = t.Description,
                    Data = t.Data,
                    Category = t.Category,
                    Keywords = t.Keywords,
                    RelevanceScore = t.RelevanceScore,
                    Impact = t.Impact,
                    Color = t.Color
                }).ToList();
                components.AddRange(realTrendsToAdd);
                componentsAdded += realTrendsToAdd.Count;
                _logger.LogInformation("Added {Count} real trending components (needed {Needed})", realTrendsToAdd.Count, needed);
                
                // If still need more online trend components, use mock as fallback
                if (realTrendsToAdd.Count < needed)
                {
                    var stillNeeded = needed - realTrendsToAdd.Count;
                    var mockOnlineTrend = mockComponents.Where(c => c.Type == "online_trend").Take(stillNeeded).ToList();
                    components.AddRange(mockOnlineTrend);
                    componentsAdded += mockOnlineTrend.Count;
                    _logger.LogInformation("Added {Count} mock online trend components as fallback", mockOnlineTrend.Count);
                }
            }
            
            if (campaignTypeCount < 2)
            {
                var needed = 2 - campaignTypeCount;
                var toAdd = mockCampaignType.Take(needed).ToList();
                components.AddRange(toAdd);
                componentsAdded += toAdd.Count;
                _logger.LogInformation("Added {Count} campaign type mock components (needed {Needed})", toAdd.Count, needed);
            }
            
            if (promotionTypeCount < 2)
            {
                var needed = 2 - promotionTypeCount;
                var toAdd = mockPromotionType.Take(needed).ToList();
                components.AddRange(toAdd);
                componentsAdded += toAdd.Count;
                _logger.LogInformation("Added {Count} promotion type mock components (needed {Needed})", toAdd.Count, needed);
            }
            
            // If still not enough total components (minimum 6), add more from any category
            if (components.Count < 6)
            {
                var needed = 6 - components.Count;
                var remainingMock = mockComponents
                    .Where(mc => !components.Any(c => c.Title == mc.Title))
                    .Take(needed)
                    .ToList();
                components.AddRange(remainingMock);
                componentsAdded += remainingMock.Count;
                _logger.LogInformation("Added {Count} additional mock components to reach minimum of 6 (needed {Needed})", remainingMock.Count, needed);
            }
            
            // Final component count verification
            var finalOnlineTrend = components.Count(c => c.Type == "online_trend");
            var finalCampaignType = components.Count(c => c.Type == "campaign_type");
            var finalPromotionType = components.Count(c => c.Type == "promotion_type");
            
            _logger.LogInformation("FINAL COMPONENT DISTRIBUTION - Total: {Total}, Online Trend: {OnlineTrend}, Campaign Type: {CampaignType}, Promotion Type: {PromotionType}, Mock Added: {MockAdded}", 
                components.Count, finalOnlineTrend, finalCampaignType, finalPromotionType, componentsAdded);
            
            return components;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error in AI component generation, falling back to mock");
            return GenerateContextualMockComponents(node);
        }
    }

    private string CreateComponentGenerationPrompt(ContentNodeDto node)
    {
        var nodeJson = System.Text.Json.JsonSerializer.Serialize(node);
        
        return $@"You are BrewPost assistant. Given the following node (title, content, postType, type, connections), generate an array of 8-18 components relevant for planning and creative execution. Return ONLY valid JSON (a single JSON array). Each component must be an object with at least these fields: id (unique short string), type (one of: local_data, online_trend, campaign_type, creative_asset), title (short title), name (short identifier), description (1-2 sentence description), category (human-readable category), keywords (array of short keywords), relevanceScore (0-100 number), impact (low|medium|high), color (hex or color name). Base suggestions on the node context. Node: {nodeJson}.";
    }
    
    private (string KeyThemes, string VisualElements, string AudienceIndicators) AnalyzeNodeContent(ContentNodeDto node)
    {
        var keyThemes = new List<string>();
        var visualElements = new List<string>();
        var audienceIndicators = new List<string>();
        
        // Universal content analysis - works for any industry/content type
        if (!string.IsNullOrEmpty(node.Title))
        {
            var title = node.Title.ToLower();
            
            // Business/Service themes
            if (title.Contains("shop") || title.Contains("store") || title.Contains("business")) keyThemes.Add("retail/commerce");
            if (title.Contains("restaurant") || title.Contains("cafe") || title.Contains("food") || title.Contains("bakery")) keyThemes.Add("food & beverage");
            if (title.Contains("tech") || title.Contains("startup") || title.Contains("app") || title.Contains("digital")) keyThemes.Add("technology");
            if (title.Contains("fitness") || title.Contains("gym") || title.Contains("health") || title.Contains("wellness")) keyThemes.Add("health & fitness");
            if (title.Contains("beauty") || title.Contains("salon") || title.Contains("spa") || title.Contains("cosmetic")) keyThemes.Add("beauty & wellness");
            if (title.Contains("education") || title.Contains("school") || title.Contains("course") || title.Contains("training")) keyThemes.Add("education");
            if (title.Contains("travel") || title.Contains("hotel") || title.Contains("vacation") || title.Contains("tour")) keyThemes.Add("travel & hospitality");
            if (title.Contains("fashion") || title.Contains("clothing") || title.Contains("style") || title.Contains("apparel")) keyThemes.Add("fashion & style");
            
            // Content themes
            if (title.Contains("secret") || title.Contains("behind") || title.Contains("exclusive")) keyThemes.Add("exclusive/premium");
            if (title.Contains("trend") || title.Contains("viral") || title.Contains("popular")) keyThemes.Add("trending");
            if (title.Contains("new") || title.Contains("launch") || title.Contains("introducing")) keyThemes.Add("innovation/launch");
            if (title.Contains("sale") || title.Contains("discount") || title.Contains("offer") || title.Contains("deal")) keyThemes.Add("promotional");
            if (title.Contains("tips") || title.Contains("guide") || title.Contains("how to") || title.Contains("tutorial")) keyThemes.Add("educational");
            if (title.Contains("review") || title.Contains("comparison") || title.Contains("vs")) keyThemes.Add("informational");
        }
        
        // Analyze content for additional context
        if (!string.IsNullOrEmpty(node.Content))
        {
            var content = node.Content.ToLower();
            
            // Service indicators
            if (content.Contains("service") || content.Contains("experience") || content.Contains("customer")) keyThemes.Add("service-focused");
            if (content.Contains("quality") || content.Contains("premium") || content.Contains("luxury")) keyThemes.Add("premium/quality");
            if (content.Contains("affordable") || content.Contains("budget") || content.Contains("cheap")) keyThemes.Add("value/budget");
            if (content.Contains("local") || content.Contains("community") || content.Contains("neighborhood")) keyThemes.Add("local/community");
            if (content.Contains("online") || content.Contains("digital") || content.Contains("virtual")) keyThemes.Add("digital/online");
            
            // Audience indicators from content
            if (content.Contains("family") || content.Contains("kids") || content.Contains("children")) audienceIndicators.Add("families");
            if (content.Contains("professional") || content.Contains("business") || content.Contains("corporate")) audienceIndicators.Add("professionals");
            if (content.Contains("student") || content.Contains("young") || content.Contains("millennial")) audienceIndicators.Add("young adults");
            if (content.Contains("senior") || content.Contains("mature") || content.Contains("elderly")) audienceIndicators.Add("seniors");
        }
        
        // Analyze image prompt for visual elements - universal approach
        if (!string.IsNullOrEmpty(node.ImagePrompt))
        {
            var imagePrompt = node.ImagePrompt.ToLower();
            
            // Visual style indicators
            if (imagePrompt.Contains("bright") || imagePrompt.Contains("colorful") || imagePrompt.Contains("vibrant")) visualElements.Add("vibrant colors");
            if (imagePrompt.Contains("minimal") || imagePrompt.Contains("clean") || imagePrompt.Contains("simple")) visualElements.Add("minimalist design");
            if (imagePrompt.Contains("dark") || imagePrompt.Contains("moody") || imagePrompt.Contains("dramatic")) visualElements.Add("dramatic/moody");
            if (imagePrompt.Contains("modern") || imagePrompt.Contains("contemporary") || imagePrompt.Contains("sleek")) visualElements.Add("modern design");
            if (imagePrompt.Contains("vintage") || imagePrompt.Contains("retro") || imagePrompt.Contains("classic")) visualElements.Add("vintage/classic");
            
            // Subject indicators
            if (imagePrompt.Contains("people") || imagePrompt.Contains("person") || imagePrompt.Contains("human")) visualElements.Add("human-centered");
            if (imagePrompt.Contains("product") || imagePrompt.Contains("item") || imagePrompt.Contains("object")) visualElements.Add("product-focused");
            if (imagePrompt.Contains("interior") || imagePrompt.Contains("room") || imagePrompt.Contains("space")) visualElements.Add("interior/space");
            if (imagePrompt.Contains("outdoor") || imagePrompt.Contains("nature") || imagePrompt.Contains("landscape")) visualElements.Add("outdoor/nature");
            if (imagePrompt.Contains("food") || imagePrompt.Contains("dish") || imagePrompt.Contains("meal")) visualElements.Add("food photography");
        }
        
        // Smart fallbacks based on extracted keywords if no specific themes found
        if (!keyThemes.Any())
        {
            var keywords = ExtractKeywordsFromContent(node);
            if (keywords.Any())
            {
                keyThemes.Add($"content about {string.Join(", ", keywords.Take(2))}");
            }
            else
            {
                keyThemes.Add("general content");
            }
        }
        
        if (!visualElements.Any()) visualElements.Add("professional visuals");
        if (!audienceIndicators.Any()) audienceIndicators.Add("target audience");
        
        return (
            KeyThemes: string.Join(", ", keyThemes),
            VisualElements: string.Join(", ", visualElements),
            AudienceIndicators: string.Join(", ", audienceIndicators)
        );
    }

    private List<GeneratedComponentDto> ParseAIResponseToComponents(string aiResponse, ContentNodeDto node)
    {
        try
        {
            // Clean the response to extract JSON
            var jsonStart = aiResponse.IndexOf('[');
            var jsonEnd = aiResponse.LastIndexOf(']');
            
            if (jsonStart == -1 || jsonEnd == -1)
            {
                _logger.LogWarning("No valid JSON array found in AI response, falling back to contextual mock components");
                return GenerateContextualMockComponents(node);
            }
            
            var jsonContent = aiResponse.Substring(jsonStart, jsonEnd - jsonStart + 1);
            _logger.LogInformation("Extracted JSON content for parsing: {JsonContent}", jsonContent);
            
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            
            var aiComponents = JsonSerializer.Deserialize<List<AIComponentResponse>>(jsonContent, options);
            
            if (aiComponents == null || !aiComponents.Any())
            {
                _logger.LogWarning("Failed to parse AI components or empty result, falling back to contextual mock components");
                return GenerateContextualMockComponents(node);
            }
            
            var parsedComponents = aiComponents.Select(ac => new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = ac.Type ?? "campaign_type",
                Title = ac.Title ?? "Generated Component",
                Name = ac.Name ?? ac.Title ?? "Generated Component",
                Description = ac.Description ?? "AI generated component",
                Category = ac.Category ?? "Campaign Type",
                Keywords = ac.Keywords ?? new[] { "marketing", "social" },
                RelevanceScore = Math.Max(0.50, ac.RelevanceScore), // Ensure minimum 50%
                Impact = ac.Impact ?? "medium",
                Color = ac.Color ?? "#3B82F6"
            }).ToList();
            
            // Log detailed breakdown of parsed components by type
            var onlineTrendCount = parsedComponents.Count(c => c.Type == "online_trend");
            var campaignTypeCount = parsedComponents.Count(c => c.Type == "campaign_type");
            var promotionTypeCount = parsedComponents.Count(c => c.Type == "promotion_type");
            
            _logger.LogInformation("AI Response Parsing Results - Total: {Total}, Online Trend: {OnlineTrend}, Campaign Type: {CampaignType}, Promotion Type: {PromotionType}", 
                parsedComponents.Count, onlineTrendCount, campaignTypeCount, promotionTypeCount);
            
            // Log each component for debugging
            foreach (var component in parsedComponents)
            {
                _logger.LogInformation("Parsed Component - Type: {Type}, Title: {Title}, Category: {Category}", 
                    component.Type, component.Title, component.Category);
            }
            
            return parsedComponents;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error parsing AI response: {Response}", aiResponse);
            return GenerateContextualMockComponents(node);
        }
    }

    private List<GeneratedComponentDto> GenerateMockComponents(ContentNodeDto node)
    {
        var components = new List<GeneratedComponentDto>();

        // Generate online trend data components
        components.AddRange(new[]
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = "Trending Hashtags",
                Name = "Current Trending Hashtags",
                Description = "Leverage popular hashtags related to your content theme",
                Category = "Online trend data",
                Keywords = new[] { "hashtags", "trending", "viral" },
                RelevanceScore = 0.82,
                Impact = "high",
                Color = "#FF6B6B"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = "Viral Content Pattern",
                Name = "Current Viral Trends",
                Description = "Content formats and styles that are currently performing well",
                Category = "Online trend data",
                Keywords = new[] { "viral", "trending", "popular" },
                RelevanceScore = 0.78,
                Impact = "high",
                Color = "#4ECDC4"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = "Peak Engagement Times",
                Name = "Optimal Posting Schedule",
                Description = "Best times to post based on current audience activity",
                Category = "Online trend data",
                Keywords = new[] { "timing", "engagement", "schedule" },
                RelevanceScore = 0.75,
                Impact = "medium",
                Color = "#45B7D1"
            }
        });

        // Generate campaign type components
        components.AddRange(new[]
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = "Brand Awareness",
                Name = "Brand Awareness Campaign",
                Description = "Focus on increasing brand visibility and recognition",
                Category = "Campaign Type",
                Keywords = new[] { "awareness", "brand", "visibility" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#3B82F6"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = "Engagement Drive",
                Name = "Engagement Campaign",
                Description = "Boost audience interaction and community building",
                Category = "Campaign Type",
                Keywords = new[] { "engagement", "interaction", "community" },
                RelevanceScore = 0.78,
                Impact = "medium",
                Color = "#10B981"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = "Conversion Focus",
                Name = "Conversion Campaign",
                Description = "Drive specific actions and conversions from your audience",
                Category = "Campaign Type",
                Keywords = new[] { "conversion", "action", "sales" },
                RelevanceScore = 0.80,
                Impact = "high",
                Color = "#8B5CF6"
            }
        });

        // Generate promotion type components
        components.AddRange(new[]
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Buy 1 Get 1 Free",
                Name = "BOGO Offer",
                Description = "Classic buy one get one free promotion to drive sales volume",
                Category = "Promotion Type",
                Keywords = new[] { "bogo", "free", "value" },
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#F59E0B"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "50% Off Second Item",
                Name = "Half Price Second Item",
                Description = "Encourage multiple purchases with second item discount",
                Category = "Promotion Type",
                Keywords = new[] { "discount", "second", "multiple" },
                RelevanceScore = 0.82,
                Impact = "high",
                Color = "#EF4444"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Flash Sale",
                Name = "Limited Time Flash Sale",
                Description = "Create urgency with time-sensitive deep discounts",
                Category = "Promotion Type",
                Keywords = new[] { "flash", "urgent", "limited" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#DC2626"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Bundle Deal",
                Name = "Product Bundle Package",
                Description = "Combine complementary products for added value",
                Category = "Promotion Type",
                Keywords = new[] { "bundle", "package", "value" },
                RelevanceScore = 0.75,
                Impact = "medium",
                Color = "#059669"
            }
        });

        return components;
    }
    
    private List<GeneratedComponentDto> GenerateUniversalPromotionFallbacks(ContentNodeDto node, string industryType)
    {
        var contentAnalysis = AnalyzeNodeContent(node);
        var promotions = new List<GeneratedComponentDto>();
        
        // Generate industry-specific promotion types based on content analysis
        var title = node.Title?.ToLower() ?? "";
        var content = node.Content?.ToLower() ?? "";
        var imagePrompt = node.ImagePrompt?.ToLower() ?? "";
        
        // Universal promotion generation based on industry type
        switch (industryType.ToLower())
        {
            case "food & beverage":
                promotions.AddRange(GenerateFoodPromotions(node, title, content));
                break;
            case "retail":
                promotions.AddRange(GenerateRetailPromotions(node, title, content));
                break;
            case "technology":
                promotions.AddRange(GenerateTechPromotions(node, title, content));
                break;
            case "health & fitness":
                promotions.AddRange(GenerateHealthPromotions(node, title, content));
                break;
            case "beauty & wellness":
                promotions.AddRange(GenerateBeautyPromotions(node, title, content));
                break;
            case "education":
                promotions.AddRange(GenerateEducationPromotions(node, title, content));
                break;
            case "travel & hospitality":
                promotions.AddRange(GenerateTravelPromotions(node, title, content));
                break;
            case "fashion":
                promotions.AddRange(GenerateFashionPromotions(node, title, content));
                break;
            case "professional services":
                promotions.AddRange(GenerateServicePromotions(node, title, content));
                break;
            default:
                promotions.AddRange(GenerateGeneralPromotions(node, title, content));
                break;
        }
        
        // Ensure we have at least 3 promotion components
        while (promotions.Count < 3)
        {
            promotions.Add(new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = $"{industryType} Special Offer",
                Name = "Industry-Tailored Promotion",
                Description = $"Special promotional offer designed for {industryType.ToLower()} businesses like '{node.Title}' to drive customer engagement and sales",
                Category = "Promotion Type",
                Keywords = new[] { "promotion", "offer", industryType.ToLower(), "special", "value" },
                RelevanceScore = 0.75,
                Impact = "medium",
                Color = "#E74C3C"
            });
        }
        
        return promotions.Take(3).ToList();
    }
    
    private List<GeneratedComponentDto> GenerateFoodPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Happy Hour Special",
                Name = "Food & Beverage Time-Based Offer",
                Description = $"Time-limited food and beverage promotion for '{node.Title}' - perfect for driving traffic during specific hours",
                Category = "Promotion Type",
                Keywords = new[] { "happy-hour", "food", "beverage", "time-limited", "special" },
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#E67E22"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Buy 2 Get 1 Free",
                Name = "Food Bundle Deal",
                Description = $"Attractive bundle offer for food items related to '{node.Title}' - encourages larger purchases and customer satisfaction",
                Category = "Promotion Type",
                Keywords = new[] { "bundle", "buy-2-get-1", "food", "deal", "value" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#27AE60"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateRetailPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Flash Sale 30% Off",
                Name = "Retail Flash Discount",
                Description = $"Limited-time flash sale promotion for retail items like '{node.Title}' - creates urgency and drives immediate purchases",
                Category = "Promotion Type",
                Keywords = new[] { "flash-sale", "discount", "retail", "30-percent", "limited-time" },
                RelevanceScore = 0.90,
                Impact = "high",
                Color = "#E74C3C"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Free Shipping Weekend",
                Name = "Retail Shipping Incentive",
                Description = $"Free shipping promotion for online retail purchases related to '{node.Title}' - removes purchase barriers",
                Category = "Promotion Type",
                Keywords = new[] { "free-shipping", "weekend", "retail", "online", "incentive" },
                RelevanceScore = 0.82,
                Impact = "medium",
                Color = "#3498DB"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateTechPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Free Trial Extended",
                Name = "Tech Service Trial Offer",
                Description = $"Extended free trial promotion for tech services like '{node.Title}' - allows customers to experience full value",
                Category = "Promotion Type",
                Keywords = new[] { "free-trial", "extended", "tech", "service", "experience" },
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#9B59B6"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Early Bird Pricing",
                Name = "Tech Launch Discount",
                Description = $"Early adopter pricing for tech products/services related to '{node.Title}' - rewards early customers",
                Category = "Promotion Type",
                Keywords = new[] { "early-bird", "pricing", "tech", "launch", "discount" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#1ABC9C"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateHealthPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "First Month Free",
                Name = "Health & Fitness Membership Offer",
                Description = $"First month free promotion for health and fitness services like '{node.Title}' - removes initial commitment barrier",
                Category = "Promotion Type",
                Keywords = new[] { "first-month-free", "health", "fitness", "membership", "trial" },
                RelevanceScore = 0.90,
                Impact = "high",
                Color = "#2ECC71"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Bring a Friend Discount",
                Name = "Health Referral Incentive",
                Description = $"Referral discount promotion for health services related to '{node.Title}' - leverages social connections",
                Category = "Promotion Type",
                Keywords = new[] { "bring-friend", "referral", "health", "discount", "social" },
                RelevanceScore = 0.83,
                Impact = "medium",
                Color = "#F39C12"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateBeautyPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Spa Package Deal",
                Name = "Beauty & Wellness Bundle",
                Description = $"Comprehensive spa package promotion for beauty services like '{node.Title}' - offers complete experience value",
                Category = "Promotion Type",
                Keywords = new[] { "spa-package", "beauty", "wellness", "bundle", "experience" },
                RelevanceScore = 0.87,
                Impact = "high",
                Color = "#E91E63"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateEducationPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Early Enrollment Discount",
                Name = "Education Course Incentive",
                Description = $"Early enrollment discount for educational content like '{node.Title}' - rewards commitment and planning",
                Category = "Promotion Type",
                Keywords = new[] { "early-enrollment", "education", "course", "discount", "planning" },
                RelevanceScore = 0.86,
                Impact = "high",
                Color = "#3F51B5"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateTravelPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Book Early Save More",
                Name = "Travel Advance Booking Discount",
                Description = $"Advance booking discount for travel services like '{node.Title}' - rewards planning and guarantees bookings",
                Category = "Promotion Type",
                Keywords = new[] { "book-early", "travel", "advance", "discount", "planning" },
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#00BCD4"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateFashionPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Seasonal Collection Sale",
                Name = "Fashion Seasonal Discount",
                Description = $"Seasonal collection sale for fashion items like '{node.Title}' - aligns with fashion cycles and trends",
                Category = "Promotion Type",
                Keywords = new[] { "seasonal", "fashion", "collection", "sale", "trends" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#FF5722"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateServicePromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Free Consultation",
                Name = "Professional Service Trial",
                Description = $"Free consultation offer for professional services like '{node.Title}' - builds trust and demonstrates value",
                Category = "Promotion Type",
                Keywords = new[] { "free-consultation", "professional", "service", "trial", "trust" },
                RelevanceScore = 0.89,
                Impact = "high",
                Color = "#607D8B"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateGeneralPromotions(ContentNodeDto node, string title, string content)
    {
        return new List<GeneratedComponentDto>
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Limited Time Offer",
                Name = "General Business Promotion",
                Description = $"Limited time promotional offer for '{node.Title}' - creates urgency and drives immediate action",
                Category = "Promotion Type",
                Keywords = new[] { "limited-time", "offer", "promotion", "urgency", "action" },
                RelevanceScore = 0.75,
                Impact = "medium",
                Color = "#795548"
            }
        };
    }
    
    private List<GeneratedComponentDto> GenerateContextualPromotionFallbacks(ContentNodeDto node)
    {
        var contentAnalysis = AnalyzeNodeContent(node);
        var promotions = new List<GeneratedComponentDto>();
        
        // Generate contextually relevant promotion types based on content analysis
        var title = node.Title?.ToLower() ?? "";
        var content = node.Content?.ToLower() ?? "";
        var imagePrompt = node.ImagePrompt?.ToLower() ?? "";
        
        // Context-aware promotion generation
        if (title.Contains("secret") || content.Contains("exclusive") || imagePrompt.Contains("premium"))
        {
            promotions.Add(new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Exclusive Access Offer",
                Name = "VIP Early Access",
                Description = $"Exclusive early access promotion that complements the '{node.Title}' content theme",
                Category = "Promotion Type",
                Keywords = new[] { "exclusive", "vip", "early-access", "premium" },
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#8B5CF6"
            });
        }
        
        if (title.Contains("trend") || content.Contains("viral") || imagePrompt.Contains("popular"))
        {
            promotions.Add(new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Trending Flash Sale",
                Name = "Viral Trend Discount",
                Description = $"Limited-time flash sale that leverages the trending nature of '{node.Title}'",
                Category = "Promotion Type",
                Keywords = new[] { "flash-sale", "trending", "limited-time", "viral" },
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#EF4444"
            });
        }
        
        if (title.Contains("business") || content.Contains("professional") || imagePrompt.Contains("corporate"))
        {
            promotions.Add(new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "promotion_type",
                Title = "Business Bundle Deal",
                Name = "Professional Package Offer",
                Description = $"Business-focused bundle promotion that enhances the professional theme of '{node.Title}'",
                Category = "Promotion Type",
                Keywords = new[] { "business", "bundle", "professional", "package" },
                RelevanceScore = 0.82,
                Impact = "high",
                Color = "#10B981"
            });
        }
        
        // Always ensure at least 3 promotion components
        while (promotions.Count < 3)
        {
            var fallbackPromotions = new[]
            {
                new BrewPost.API.DTOs.GeneratedComponentDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Type = "promotion_type",
                    Title = "Buy 1 Get 1 Free",
                    Name = "BOGO Special Offer",
                    Description = $"Classic BOGO promotion that supports the value proposition of '{node.Title ?? "your content"}'",
                    Category = "Promotion Type",
                    Keywords = new[] { "bogo", "value", "offer", "free" },
                    RelevanceScore = 0.75,
                    Impact = "high",
                    Color = "#F59E0B"
                },
                new BrewPost.API.DTOs.GeneratedComponentDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Type = "promotion_type",
                    Title = "50% Off Second Item",
                    Name = "Half Price Deal",
                    Description = $"Second item discount that encourages multiple engagement with '{node.Title ?? "your content"}'",
                    Category = "Promotion Type",
                    Keywords = new[] { "discount", "50-percent", "second-item", "deal" },
                    RelevanceScore = 0.72,
                    Impact = "medium",
                    Color = "#DC2626"
                },
                new BrewPost.API.DTOs.GeneratedComponentDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Type = "promotion_type",
                    Title = "Limited Time Bundle",
                    Name = "Time-Sensitive Package",
                    Description = $"Urgency-driven bundle offer that complements the engaging nature of '{node.Title ?? "your content"}'",
                    Category = "Promotion Type",
                    Keywords = new[] { "limited-time", "bundle", "urgency", "package" },
                    RelevanceScore = 0.70,
                    Impact = "medium",
                    Color = "#059669"
                }
            };
            
            foreach (var promo in fallbackPromotions)
            {
                if (promotions.Count < 3 && !promotions.Any(p => p.Title == promo.Title))
                {
                    promotions.Add(promo);
                }
            }
        }
        
        return promotions.Take(3).ToList();
    }
    
    private List<GeneratedComponentDto> GenerateContextualMockComponents(ContentNodeDto node)
    {
        var contentAnalysis = AnalyzeNodeContent(node);
        var components = new List<GeneratedComponentDto>();
        
        var title = node.Title ?? "Content";
        var hasImagePrompt = !string.IsNullOrEmpty(node.ImagePrompt);
        var hasContent = !string.IsNullOrEmpty(node.Content);
        var keywords = ExtractKeywordsFromContent(node);
        
        // Determine industry/content type for universal adaptation
        var industryType = DetermineIndustryType(contentAnalysis.KeyThemes, title);
        
        // Generate universal online trend data components
        components.AddRange(new[]
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = $"#{title.Replace(" ", "")} Trending",
                Name = $"{industryType} Trending Hashtags",
                Description = $"Industry-specific trending hashtags for {industryType.ToLower()} content like '{title}' {(hasImagePrompt ? "with optimized visual elements" : "")}",
                Category = "Online trend data",
                Keywords = keywords.Concat(new[] { "hashtags", "trending", industryType.ToLower() }).Take(5).ToArray(),
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#FF6B6B"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = $"{industryType} Content Patterns",
                Name = "Industry-Specific Visual Trends",
                Description = $"Current {industryType.ToLower()} industry visual patterns that enhance '{title}' content {(hasImagePrompt ? "and complement the visual style" : "")}",
                Category = "Online trend data",
                Keywords = contentAnalysis.VisualElements.Split(',').Select(v => v.Trim()).Concat(new[] { "visual", "patterns", industryType.ToLower() }).Take(5).ToArray(),
                RelevanceScore = 0.82,
                Impact = "high",
                Color = "#4ECDC4"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "online_trend",
                Title = $"{industryType} Engagement Insights",
                Name = "Industry-Optimized Timing",
                Description = $"Optimal posting schedule and engagement strategies specifically for {industryType.ToLower()} content like '{title}' based on industry audience patterns",
                Category = "Online trend data",
                Keywords = new[] { "timing", "engagement", industryType.ToLower(), "optimization", "audience" },
                RelevanceScore = 0.78,
                Impact = "medium",
                Color = "#45B7D1"
            }
        });

        // Generate universal campaign type components
        components.AddRange(new[]
        {
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = $"{industryType} Brand Awareness",
                Name = "Industry-Tailored Brand Campaign",
                Description = $"{industryType} brand awareness campaign that leverages '{title}' to build recognition and trust {(hasImagePrompt ? "through compelling visual storytelling" : "")}",
                Category = "Campaign Type",
                Keywords = keywords.Concat(new[] { "brand", "awareness", industryType.ToLower() }).Take(5).ToArray(),
                RelevanceScore = 0.88,
                Impact = "high",
                Color = "#3B82F6"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = $"{industryType} Engagement Strategy",
                Name = "Industry-Specific Engagement Drive",
                Description = $"Targeted engagement campaign for {industryType.ToLower()} businesses using '{title}' {(hasContent ? "and its messaging" : "")} to drive meaningful customer interaction",
                Category = "Campaign Type",
                Keywords = contentAnalysis.KeyThemes.Split(',').Select(t => t.Trim()).Concat(new[] { "engagement", industryType.ToLower() }).Take(5).ToArray(),
                RelevanceScore = 0.85,
                Impact = "high",
                Color = "#10B981"
            },
            new BrewPost.API.DTOs.GeneratedComponentDto
            {
                Id = Guid.NewGuid().ToString(),
                Type = "campaign_type",
                Title = $"{industryType} Conversion Focus",
                Name = "Industry-Optimized Conversion Campaign",
                Description = $"Conversion-focused campaign tailored for {industryType.ToLower()} businesses, using '{title}' to demonstrate value and drive customer action",
                Category = "Campaign Type",
                Keywords = new[] { "conversion", "value", industryType.ToLower(), "results", "action" },
                RelevanceScore = 0.82,
                Impact = "high",
                Color = "#8B5CF6"
            }
        });

        // Generate universal promotion type components using the enhanced method
        var promotionComponents = GenerateUniversalPromotionFallbacks(node, industryType);
        components.AddRange(promotionComponents);

        return components;
    }
    
    private string DetermineIndustryType(string keyThemes, string title)
    {
        var themes = keyThemes.ToLower();
        var titleLower = title.ToLower();
        
        // Food & Beverage
        if (themes.Contains("food & beverage") || titleLower.Contains("restaurant") || titleLower.Contains("cafe") || 
            titleLower.Contains("bakery") || titleLower.Contains("food") || titleLower.Contains("chocolate") || 
            titleLower.Contains("cake") || titleLower.Contains("croissant")) return "Food & Beverage";
            
        // Retail & Commerce
        if (themes.Contains("retail/commerce") || titleLower.Contains("shop") || titleLower.Contains("store") || 
            titleLower.Contains("boutique") || titleLower.Contains("market")) return "Retail";
            
        // Technology
        if (themes.Contains("technology") || titleLower.Contains("tech") || titleLower.Contains("app") || 
            titleLower.Contains("software") || titleLower.Contains("digital") || titleLower.Contains("startup")) return "Technology";
            
        // Health & Fitness
        if (themes.Contains("health & fitness") || titleLower.Contains("fitness") || titleLower.Contains("gym") || 
            titleLower.Contains("health") || titleLower.Contains("wellness")) return "Health & Fitness";
            
        // Beauty & Wellness
        if (themes.Contains("beauty & wellness") || titleLower.Contains("beauty") || titleLower.Contains("salon") || 
            titleLower.Contains("spa") || titleLower.Contains("cosmetic")) return "Beauty & Wellness";
            
        // Education
        if (themes.Contains("education") || titleLower.Contains("school") || titleLower.Contains("course") || 
            titleLower.Contains("training") || titleLower.Contains("education")) return "Education";
            
        // Travel & Hospitality
        if (themes.Contains("travel & hospitality") || titleLower.Contains("travel") || titleLower.Contains("hotel") || 
            titleLower.Contains("vacation") || titleLower.Contains("tour")) return "Travel & Hospitality";
            
        // Fashion & Style
        if (themes.Contains("fashion & style") || titleLower.Contains("fashion") || titleLower.Contains("clothing") || 
            titleLower.Contains("style") || titleLower.Contains("apparel")) return "Fashion";
            
        // Service-based
        if (themes.Contains("service-focused") || titleLower.Contains("service") || titleLower.Contains("consulting") || 
            titleLower.Contains("agency")) return "Professional Services";
            
        // Default
        return "Business";
    }
    
    private string[] ExtractKeywordsFromContent(ContentNodeDto node)
    {
        var keywords = new List<string>();
        
        // Extract from title
        if (!string.IsNullOrEmpty(node.Title))
        {
            keywords.AddRange(node.Title.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Where(w => w.Length > 3)
                .Select(w => w.ToLower().Trim('!', '?', '.', ','))
                .Take(3));
        }
        
        // Extract from content
        if (!string.IsNullOrEmpty(node.Content))
        {
            keywords.AddRange(node.Content.Split(' ', StringSplitOptions.RemoveEmptyEntries)
                .Where(w => w.Length > 4)
                .Select(w => w.ToLower().Trim('!', '?', '.', ','))
                .Take(2));
        }
        
        return keywords.Distinct().Take(5).ToArray();
    }

    // Helper class for parsing AI response
    private class AIComponentResponse
    {
        public string? Type { get; set; }
        public string? Title { get; set; }
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? Category { get; set; }
        public string[]? Keywords { get; set; }
        public double RelevanceScore { get; set; }
        public string? Impact { get; set; }
        public string? Color { get; set; }
    }
}
